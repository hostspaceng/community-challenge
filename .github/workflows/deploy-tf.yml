name: 'Deploy Terraform Infra'

on:
    workflow_dispatch:

    push:
        branches:
            - main
        paths:
            - terraform/**
    
    pull_request:
        branches:
            - main

permissions:
    contents: read
    pull-requests: write


jobs:

    deploy-terraform:
        runs-on: ubuntu-latest

        defaults:
          run:
            shell: bash
            working-directory: ./terraform

        steps:

            - name: Copy Repo Code
              uses: actions/checkout@v4

            - name: Install Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                terraform_version: 1.6.2

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ vars.AWS_REGION }}


            - name: Clean Terraform Code
              id: fmt
              run: terraform fmt -check
              continue-on-error: true

            - name: Initialize Terraform
              id: init
              env:
                AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
                AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
              run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}"
    

            - name: Validate Terraform Code
              id: validate
              run: terraform validate -no-color

            - name: Plan terraform code
              id: plan
              if: github.event_name == 'pull_request'
              run: terraform plan -no-color

            - uses: actions/github-script@v6
              if: github.event_name == 'pull_request'
              env:
                PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                  #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                  #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                  <details><summary>Validation Output</summary>
      
                  \`\`\`\n
                  ${{ steps.validate.outputs.stdout }}
                  \`\`\`
      
                  </details>
      
                  #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
                  <details><summary>Show Plan</summary>
      
                  \`\`\`\n
                  ${process.env.PLAN}
                  \`\`\`
      
                  </details>
      
                  *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
      
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                  })
      


            - name: Check if terraform plan succeeds
              if: steps.plan.outcome == 'failure'
              run: exit 1

            - name: Terraform Apply
              if: github.ref == 'refs/heads/main' && github.event_name == 'push'
              run: terraform apply -auto-approve -input=false
       