name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  # set this to your preferred AWS region, e.g. us-west-1
  AWS_REGION: ca-central-1      
# Amazon ECR frontend repository name
  ECR_REPOSITORY_V: ui       
 # Amazon ECR backend repository name
  ECR_REPOSITORY_F: backend      
 # set this to your Amazon ECS service name
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}        
# set this to your Amazon ECS cluster name
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}               
  # set this to the path to your Amazon ECS task definition file, e.g. .aws/task-definition.json
  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}   
 # Backend container name in the containerDefinitions section of the task definition
  CONTAINER_NAME_F: backend       
# Frontend container name in the containerDefinitions section of the task definition   
  CONTAINER_NAME_V: ui


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: community
        run: |
          # Build the docker containers using docker compose and
          # push it to ECR so that they can
          # be deployed to ECS.
          docker compose -p $IMAGE_TAG create

          #Output the docker images
          docker images

          docker tag community-ui:latest $ECR_REGISTRY/$ECR_REPOSITORY_V
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_V
          #save the ui image name in the uiimage variable and store in the github output
          echo "uiimage=$ECR_REGISTRY/$ECR_REPOSITORY_V" >> $GITHUB_OUTPUT

          docker tag community-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY_F
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_F
          #save the ui image name in the uiimage variable and store in the github output
          echo "backendimage=$ECR_REGISTRY/$ECR_REPOSITORY_F" >> $GITHUB_OUTPUT


      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-ui
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME_V }}
          image: ${{ steps.build-image.outputs.uiimage }}


      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-backend
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ steps.task-def-ui.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME_F }}
          image: ${{ steps.build-image.outputs.backendimage }}


      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
